#!/usr/bin/env python3.6

import os, glob
import sys
import logging
import time

import gufo
from scavengers import gPlay, starSub, momPlay, tPlay
from scavengers import gPlayMp, bptPlot, vorPlay
from scavengers import util as pretty

import argparse
from  argparse import ArgumentParser
import textwrap as _textwrap

import pkg_resources
try:
    __version__ = pkg_resources.require("gufo")[0].version
except pkg_resources.DistributionNotFound:
    __version__ = "dev"



gp = gPlay.gplay()
ss = starSub.starsub()
mom = momPlay.momplay()
tP = tPlay.tplay()
bpt = bptPlot.BPTplot()
vor = vorPlay.vorplay()


class MultilineFormatter(argparse.HelpFormatter):
    def _fill_text(self, text, width, indent):
        text = self._whitespace_matcher.sub(' ', text).strip()
        paragraphs = text.split('|n ')
        multiline_text = ''
        for paragraph in paragraphs:
            formatted_paragraph = _textwrap.fill(paragraph, width, initial_indent=indent, subsequent_indent=indent) + '\n\n'
            multiline_text = multiline_text + formatted_paragraph
        return multiline_text

def outFunction ():
        

        print ("""\nRun one of the following commands:\n
        gufo\t\t\t-gd <configFileName>:\tgenerate config file in working directory
        gufo\t\t\t-c  <configFileName>:\trun GuFo with modules enabled from config file
        gufo -stS\t\t-c  <configFileName>:\tmake line cube from PPXF outputs
        gufo -gp\t\t-c  <configFileName>:\trun fit with parameters from config file and lineList file (outdated)
        gufo -gpMp\t\t-c  <configFileName>:\trun fit on multiprocess with parameters from config file and lineList file
        gufo -gPl\t\t-c  <configFileName>:\tplot fit results for each bin
        gufo -gPs\t-bin <binNum>\t-c  <configFileName>:\tplot fit results for binNum
        gufo -mom\t\t-c  <configFileName>:\tmake moment maps of fitted lines
        gufo -momPl\t\t-c  <configFileName>:\t plot moment maps from fits files
        gufo -res\t\t-c  <configFileName>:\tmake residual maps for each fitted line
        gufo -lr\t-c  <configFileName>:\testimate lineRatios, make lineRatio maps and BPT plots of fitted lines
        gufo -clT\t\t-c  <configFileName>:\tclean table leaving only fit results
        gufo -vor\t\t-c  <configFileName>:\tvoronoi binning of output of PPXF (star subtracted datacube) 
        gufo -stS\t\t-c  <configFileName>:\tmake stellar subtracted datacube (output of PPXF is a table)
            """)

        return 

def main (argv):

    for i, arg in enumerate(argv):
        if (arg[0] == '-') and arg[1].isdigit(): argv[i] = ' ' + arg

    parser = ArgumentParser(description='gufo: tools to fit gaussian lines in cubes'
                            '|n version {:s} |n install path {:s} |n '
                            'Filippo Maccagni <filippo.maccagni@gmial.com>'.format(__version__,
                                                                               os.path.dirname(__file__)),
                            formatter_class=MultilineFormatter,
                            add_help=False)

    add = parser.add_argument

    add("-h", "--help",  action="store_true",
            help="Print help message and exit")

    add("-v","--version", action='version',
            version='{:s} version {:s}'.format(parser.prog, __version__))

    add("-gd", "--generate_default",
        default=False,
        help='Generate a default configuration file (YAML format)')

    add('-stS', '--starSub',
        action='store_true',
        help= 'make stat subtracted datacube from PPXF output')

    add('-gp', '--gPlay',
        action='store_true',
        help= 'tool to play with gaussian fits')

    add('-vor', '--vorPlay',
        action='store_true',
        help= 'tool to voronoi bin line cube')

    add('-gMp', '--gMpPlay',
        action='store_true',
        help= 'tool to play with gaussian fits on multiple cores')

    add('-gPl', '--gPlot',
        action='store_true',
        help= 'tool to plot fit results for each beam')

    add('-gPs', '--gPlotSingle',
        action='store_true',
        help= 'tool to plot fit results from a single bin')

    add('-res', '--resPlot',
        action='store_true',
        help= 'tool to plot residuals of fit')

    add('-bptPl', '--bptPlots',
        action='store_true',
        help= 'tool to draw BPT plots')

    add('-bptMp', '--bptMaps',
        action='store_true',
        help= 'tool to draw BPT maps')

    add('-bin', '--binID',
        type = str,
        default=False,
        help= 'bin to plot')

    add('-clT', '--clTbl',
        action='store_true',
        help= 'clean fit table from moments and lineratios')

    add('-mm', '--moments',
        action='store_true',
        help= 'tool to play with gaussian fits')

    add('-mPl', '--momPlot',
        action='store_true',
        help= 'tool to play with gaussian fits')
    
    add('-lr', '--lineRatios',
        action='store_true',
        help= 'tool to play with gaussian fits')

    add('-c', '--cfgFile',
        type=str,
        default=False,
        help='''input .fits file''')

    args, unknown = parser.parse_known_args()

    if args.help and len(argv) ==1 :
        print('\n\t************* --- GuFo : Help --- **************\n')

        print ('\t\t  ... called for help ...\n')
        parser.print_help()
        outFunction()

        print('\n\t************* --- GuFo : DONE --- **************\n')

        sys.exit(0)

    # Make default file
    # +++++++++++++++++
    if args.generate_default:
        time_start_load = time.time()
        from shutil import copyfile
        configfile = args.generate_default
        print("## Getting parameter file: {}".format(configfile))
        GUFO_PATH =  os.path.dirname((os.path.dirname(os.path.abspath(__file__))))
        #print os.path.abspath(os.path.join(os.pardir))
        copyfile('{}/{}'.format(GUFO_PATH, 'gufo_default.yaml'),
                 configfile)
        print("## !!! edit parameter in your current directory before use !!!".format(time.time() - time_start_load))
        print("## Done ({0:.2f}s)".format(time.time() - time_start_load))

        sys.exit(0)

    #time_start_load = time.time()

    # Load parameter file
    # +++++++++++++++++++
    if args.cfgFile:
        print("## Load parameter file")
        gPar = gufo.gufo(args.cfgFile)
    #    print("## Load parameter file ... Done ({0:.2f}s)".format(
    #time.time() - time_start_load))
    else:
        outFunction()

    if args.starSub or gPar.cfg_par['starSub'].get('enable',False) == True:
        time_start_load = time.time()        
        print ('\n\t************* --- GuFo : make Datacubes --- **************\n')
        gPar = gufo.gufo(args.cfgFile)
        if gPar.cfg_par['starSub'].get('scaleFlux',False) == True:
            ss.makeCubesPix(gPar.cfg_par)
        elif gPar.cfg_par['starSub'].get('scaleFlux',False) == False:
            ss.makeCubesVorBin(gPar.cfg_par)
        print("## fits ... Done ({0:.2f}s)".format((time.time()- time_start_load)))
        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.vorPlay or gPar.cfg_par['vorBin'].get('enable',False) == True:
        time_start_load = time.time()        
        gPar = gufo.gufo(args.cfgFile)
        pretty.prettyOutput_Running('\n\t *********** --- GuFo: VorBin --- ***********\n')
        vor.vorBin(gPar.cfg_par)
        print ('\n\t************* --- GuFo : vorLineCube --- **************\n')
        ss.makeCubesVorLine(gPar.cfg_par)
        print("## fits ... Done ({0:.2f}m)".format((time.time()- time_start_load)))
        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.gPlay or gPar.cfg_par['gFit'].get('enable',False) == True and gPar.cfg_par['general'].get('enableMP',False) == False :
        time_start_load = time.time()        
        print ('\n\t************* --- GuFo : gPlay --- **************\n')
        gPar = gufo.gufo(args.cfgFile)
        gp.gFit(gPar.cfg_par)
        print("## fits ... Done ({0:.2f}m)".format((time.time()- time_start_load)))
        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.gMpPlay or gPar.cfg_par['general'].get('enableMP',False) == True and gPar.cfg_par['gFit'].get('enable',False) == True or args.gPlay:
        time_start_load = time.time()        
        print ('\n\t************* --- GuFo : MPgPlay --- **************\n')
        gPar = gufo.gufo(args.cfgFile)
        gPlayMp.main(gPar.cfg_par)
        print("## fits ... Done ({0:.2f}m)".format((time.time()- time_start_load)))
        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.gPlot or gPar.cfg_par['gPlot'].get('enable',False) == True and gPar.cfg_par['gFit'].get('enable',False) == False:
        time_start_load = time.time()
        print ('\n\t************* --- GuFo : gPlot --- **************\n')
        gPar = gufo.gufo(args.cfgFile)
        gp.gPlot(gPar.cfg_par)
        print("## plot fits ... Done ({0:.2f}s)".format((time.time()- time_start_load)))
        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.gPlotSingle:
        time_start_load = time.time()
        print ('\n\t************* --- GuFo : gPlot single BIN --- **************\n')
        gPar = gufo.gufo(args.cfgFile)
        gPar.cfg_par['general']['cleanTable'] = False
        gPar.cfg_par['starSub']['enable'] = False
        gPar.cfg_par['vorBin']['enable'] = False
        gPar.cfg_par['gFit']['enable'] = False
        gPar.cfg_par['lineRatios']['enable'] = False
        gPar.cfg_par['moments']['enable']
        gp.plotSingleBin(gPar.cfg_par, args.binID)
        print("## plot fits ... Done ({0:.2f}s)".format((time.time()- time_start_load)))
        print('\n\t************* --- GuFo : DONE --- **************\n')
 
    if args.resPlot or gPar.cfg_par['residuals'].get('enable',False) == True:
        time_start_load = time.time()
        print ('\n\t************* --- GuFo : residuals --- **************\n')
        gPar = gufo.gufo(args.cfgFile)
        mom.resLines(gPar.cfg_par)
        print("## plot fits ... Done ({0:.2f}s)".format((time.time()- time_start_load)))
        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.moments or gPar.cfg_par['moments'].get('enable',False) == True:
        
        print ('\n\t *********** --- GuFo : moments --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        gPar.cfg_par['general']['cleanTable'] = True
        tP.cleanTable(gPar.cfg_par)        
        mom.makeMoments(gPar.cfg_par)
        gPar.cfg_par['general']['cleanTable'] = False
        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.momPlot or gPar.cfg_par['moments'].get('plot',False) == True:
        
        print ('\n\t *********** --- GuFo : moments --- ************\n')
        gPar = gufo.gufo(args.cfgFile)
        gPar.cfg_par['general']['cleanTable'] = True
        
        

        mom.makeMoments(gPar.cfg_par)
        gPar.cfg_par['general']['cleanTable'] = False
        print('\n\t************* --- GuFo : DONE --- **************\n')


    if args.lineRatios or gPar.cfg_par['lineRatios'].get('enable',False) == True:
        
        print ('\n\t************* --- GuFo : lineRatios --- **************\n')
        gPar = gufo.gufo(args.cfgFile)
        gPar.cfg_par['general']['cleanTable'] = True
        tP.cleanTable(gPar.cfg_par)   
        gPar.cfg_par['general']['cleanTable'] = False

        lineInfo = tP.openLineList(gPar.cfg_par)
        tP.binLineRatio(gPar.cfg_par,lineInfo)
        mom.makeLineRatioMaps(gPar.cfg_par)
        print('\n\t************* --- GuFo : DONE --- **************\n')    
  
    if args.bptPlots or gPar.cfg_par['lineRatios'].get('bptPlot',False) == True:    
        print ('\n\t************* --- GuFo : BPT plots --- **************\n')
        gPar.cfg_par['lineRatios'].get('bptMap',False) == True
        gPar.cfg_par['general']['cleanTable'] = True
        bpt.bptOIII(gPar.cfg_par)
        bpt.bptSII(gPar.cfg_par)
        bpt.bptOI(gPar.cfg_par)
        gPar.cfg_par['general']['cleanTable'] = False

        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.bptMaps or gPar.cfg_par['lineRatios'].get('bptMap',False) == True:    
        
        print ('\n\t************* --- GuFo : BPT maps --- **************\n')
        print(gPar.cfg_par['general']['bptDir']+gPar.cfg_par['gFit']['modName'])
        gPar.cfg_par['general']['cleanTable'] = True
        outBPT = glob.glob(gPar.cfg_par['general']['bptDir']+gPar.cfg_par['gFit']['modName']+"/*.fits")
        print(outBPT)
        for i in outBPT:
            bpt.bptIM(gPar.cfg_par,i)
        gPar.cfg_par['general']['cleanTable'] = False

        print('\n\t************* --- GuFo : DONE --- **************\n')

    if args.clTbl or gPar.cfg_par['general'].get('cleanTable',False) == True:
        
        print ('\n\t************* --- GuFo : clean Table --- **************\n')
        gPar = gufo.gufo(args.cfgFile)
        tP.cleanTable(gPar.cfg_par)
        print('\n\t************* --- GuFo : DONE --- **************\n') 

    if args.cfgFile is None:
        print ('\n\t************* --- GuFo : ERROR --- **************')
        print ('\t... you have not entered a config File ... \n')
        outFunction()
        print ('\t************* --- GuFo : DONE  --- *************\n')
        sys.exit(0)

print ('\n\t************* ---      GuFo    --- *************')

main([a for a in sys.argv[1:]])

print ('\t************* --- GuFo : DONE  --- *************\n')